{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tarotDeck","words","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","App","cards","reverse","keywords","useState","Set","gone","useSprings","length","props","set","bind","useGesture","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","div","key","style","transform","interpolate","backgroundImage","split","sentence","idx","position","backgroundColor","bottom","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAKMA,G,MAAY,CAIhB,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,eA4BIC,EAAQ,CACZ,gDACA,oDACA,uDACA,uCACA,8CACA,8DACA,oDACA,8CACA,+CACA,+CACA,oDACA,sDACA,8CACA,qDACA,2CACA,gDACA,+CACA,0CACA,4CACA,gDACA,+CACA,yDAIIC,EAAK,SAAAC,GAAC,MAAK,CACfC,EAAG,EACHC,GAAQ,EAALF,EACHG,MAAO,EACPC,IAA2B,GAAhBC,KAAKC,SAAV,GACNC,MAAW,IAAJP,IAEHQ,EAAO,SAAAR,GAAC,MAAK,CAAEC,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,GAAI,MAE7CO,EAAQ,SAACC,EAAGC,GAAJ,2DACkCD,EAC5C,GAFU,wBAEQA,EAFR,sBAEuBC,EAFvB,MAiFCC,MA/Df,WAEE,IAAMC,EAAQhB,EAAUiB,UAClBC,EAAWjB,EAAMgB,UAHV,EAIEE,oBAAS,kBAAM,IAAIC,OAA3BC,EAJM,sBAKQC,YAAWN,EAAMO,QAAQ,SAAApB,GAAC,sBAC1CD,EAAGC,GADuC,CAE7CQ,KAAMA,EAAKR,QAPA,mBAKNqB,EALM,KAKCC,EALD,KAUPC,EAAOC,aACX,YAOO,IANEC,EAMH,cANJC,KAMI,MALJC,EAKI,EALJA,KACQC,EAIJ,cAJJC,MAII,MAFQC,GAER,EAHJC,SAGI,cAFJC,UAEI,OADJC,EACI,EADJA,SAGMC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELf,EAAKiB,IAAIV,GAC/BH,GAAI,SAAAtB,GACF,GAAIyB,IAAUzB,EAAd,CACA,IAAMoC,EAASlB,EAAKmB,IAAIZ,GAIxB,MAAO,CACLxB,EAJQmC,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAKnExB,IAJUwB,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAKzD9B,MAJYwB,EAAO,IAAM,EAKzBpB,WAAOiC,EACPC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,UAG5DT,GAAQT,EAAK0B,OAAS/B,EAAMO,QAC/ByB,YAAW,kBAAM3B,EAAK4B,SAAWxB,GAAI,SAAAtB,GAAC,OAAID,EAAGC,QAAK,QAIxD,OAAOqB,EAAM0B,KAAI,WAAuB/C,GAAvB,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGE,EAAT,EAASA,IAAKD,EAAd,EAAcA,MAAd,OACf,kBAAC,IAAS6C,IAAV,CACEC,IAAKjD,EACLkD,MAAO,CACLC,UAAWC,YAAY,CAACnD,EAAGC,IAAI,SAACD,EAAGC,GAAJ,4BAAyBD,EAAzB,cAAgCC,EAAhC,cAMjC,kBAAC,IAAS8C,IAAV,iBACMzB,EAAKvB,GADX,CAEEkD,MAAO,CACLC,UAAWC,YAAY,CAAChD,EAAKD,GAAQM,GACrC4C,gBAAgB,OAAD,OAASxC,EAAMb,GAAf,SAGlBe,EAASf,GAAGsD,MAAM,MAAMP,KAAK,SAACQ,EAAUC,GAAX,OAAmB,uBAAGP,IAAKM,EAAUL,MAAO,CAAEO,SAAU,WAAYC,gBAAiB,QAASC,OAAQ,GAAKH,IAAQD,WC7JnIK,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a34791fd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport { useGesture } from \"react-with-gesture\";\nimport \"./styles.css\";\n\nconst tarotDeck = [\n  // Cards from https://en.wikipedia.org/wiki/Rider-Waite_tarot_deck\n  // Authorship: Arthur Edward Waite, Pamela Coleman Smith was the artist and worked as an artist 'for hire.'\n  // Waite was the copyright holder and he died in 1942. - These images scanned by Holly Voley\n  \"/maj00.png\",\n  \"/maj01.png\",\n  \"/maj02.png\",\n  \"/maj03.png\",\n  \"/maj04.png\",\n  \"/maj05.png\",\n  \"/maj06.png\",\n  \"/maj07.png\",\n  \"/maj08.png\",\n  \"/maj09.png\",\n  \"/maj10.png\",\n  \"/maj11.png\",\n  \"/maj12.png\",\n  \"/maj13.png\",\n  \"/maj14.png\",\n  \"/maj15.png\",\n  \"/maj16.png\",\n  \"/maj17.png\",\n  \"/maj18.png\",\n  \"/maj19.png\",\n  \"/maj20.png\",\n  \"/maj21.png\",\n];\n\nconst titles = [\n  \"The Fool\",\n  \"The Magician\",\n  \"The High Priestess\",\n  \"The Empress\",\n  \"The Emperor\",\n  \"The Hierophant\",\n  \"The Lovers\",\n  \"The Chariot\",\n  \"Strength\",\n  \"The Hermit\",\n  \"Wheel of Fortune\",\n  \"Justice\",\n  \"The Hanged Man\",\n  \"Death\",\n  \"Temperance\",\n  \"The Devil\",\n  \"The Tower\",\n  \"The Star\",\n  \"The Moon\",\n  \"The Sun\",\n  \"Judgement\",\n  \"The World\",\n];\n\nconst words = [\n  \"BEGINNING\\nSPONTANEITY\\nFAITH\\nAPPARENT FOLLY\",\n  \"ACTION\\nCONSCIOUS AWARENESS\\nCONCENTRATION\\nPOWER\",\n  \"NONACTION\\nUNCONSCIOUS AWARENESS\\nPOTENTIAL\\nMYSTERY\",\n  \"MOTHERING\\nABUNDANCE\\nSENSES\\nNATURE\",\n  \"FATHERING\\nSTRUCTURE\\nAUTHORITY\\nREGULATION\",\n  \"EDUCATION\\nBELIEF SYSTEMS\\nCONFORMITY\\nGROUP IDENTIFICATION\",\n  \"RELATIONSHIP\\nSEXUALITY\\nPERSONAL BELIEFS\\nVALUES\",\n  \"VICTORY\\nWILL\\nSELF-ASSERTION\\nHARD CONTROL\",\n  \"STRENGTH\\nPATIENCE\\nCOMPASSION\\nSOFT CONTROL\",\n  \"INTROSPECTION\\nSEARCHING\\nGUIDANCE\\nSOLITUDE\",\n  \"DESTINY\\nTURNING POINT\\nMOVEMENT\\nPERSONAL VISION\",\n  \"JUSTICE\\nRESPONSIBILITY\\nDECISION\\nCAUSE AND EFFECT\",\n  \"LETTING GO\\nREVERSAL\\nSUSPENSION\\nSACRIFICE\",\n  \"ENDING\\nTRANSITION\\nELIMINATION\\nINEXORABLE FORCES\",\n  \"TEMPERANCE\\nBALANCE\\nHEALTH\\nCOMBINATION\",\n  \"BONDAGE\\nMATERIALISM\\nIGNORANCE\\nHOPELESSNESS\",\n  \"SUDDEN CHANGE\\nRELEASE\\nDOWNFALL\\nREVELATION\",\n  \"HOPE\\nINSPIRATION\\nGENEROSITY\\nSERENITY\",\n  \"FEAR\\nILLUSION\\nIMAGINATION\\nBEWILDERMENT\",\n  \"ENLIGHTENMENT\\nGREATNESS\\nVITALITY\\nASSURANCE\",\n  \"JUDGMENT\\nREBIRTH\\nINNER CALLING\\nABSOLUTION\",\n  \"INTEGRATION\\nACCOMPLISHMENT\\nINVOLVEMENT\\nFULFILLMENT\",\n];\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n    10}deg) rotateZ(${r}deg) scale(${s})`;\n\n/**\n * Randomize array element order in-place.\n * Using Durstenfeld shuffle algorithm.\n * Updated for EC6/ECMA2015\n * source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n */\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction App() {\n  // const cards = shuffleArray(tarotDeck);\n  const cards = tarotDeck.reverse();\n  const keywords = words.reverse();\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({\n    ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n      const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n      if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n      set(i => {\n        if (index !== i) return; // We're only interested in changing spring-data for the current spring\n        const isGone = gone.has(index);\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n        const scale = down ? 1.1 : 1; // Active cards lift up a bit\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n      if (!down && gone.size === cards.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div\n      key={i}\n      style={{\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n      }}\n    >\n      {\n        // This is the card itself, we're binding our gesture to it (and inject its index so we know which is which)\n      }\n      <animated.div\n        {...bind(i)}\n        style={{\n          transform: interpolate([rot, scale], trans),\n          backgroundImage: `url(${cards[i]})`\n        }}\n      />\n      {keywords[i].split(\"\\n\").map(((sentence, idx) => <p key={sentence} style={{ position: 'absolute', backgroundColor: 'white', bottom: 20 * idx }}>{sentence}</p>))}\n    </animated.div>\n  ));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}